#pragma once


#include "Wamp.hpp"

#include "jmsf/validating/Should.hin"
#include "Memory_pointer.h"
#include "jmsf/typeing/Boolean.h"


#include "jmsf/validating/logging_macroses.h"


namespace jmsf {
namespace memorying {


template< class A_type >
typeing::Boolean Wamp< A_type >::is_empty() const noexcept {
	return _the_memory_pointer.is_empty();
}

template< class A_type >
typeing::Boolean Wamp< A_type >::is_not_empty() const noexcept {
	return _the_memory_pointer.is_not_empty();
}

template< class A_type >
const A_type *Wamp< A_type >::get() const {
	JMSF_LOG_ERROR_PRELIMINARY_OUTPUT_TYPED( is_empty(), "Wamp< A_type >::get()", JMSF_TYPE_NAME( A_type ) );
	jmsf_Should_never_be_null( *this );
	return reinterpret_cast< const A_type * >( _the_memory_pointer.get() );
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
template< class A_type >
A_type *Wamp< A_type >::take() {
	JMSF_LOG_ERROR_PRELIMINARY_OUTPUT_TYPED( is_empty(), "Wamp< A_type >::take()", JMSF_TYPE_NAME( A_type ) );
	jmsf_Should_never_be_null( *this );
	return reinterpret_cast< A_type * >( _the_memory_pointer.take() );
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
template< class A_type >
Memory_pointer Wamp< A_type >::get_memory() const {
	JMSF_LOG_ERROR_PRELIMINARY_OUTPUT_TYPED( is_empty(), "Wamp< A_type >::get_memory()", JMSF_TYPE_NAME( A_type ) );
	jmsf_Should_never_be_null( *this );
	return _the_memory_pointer;
}

template< class A_type >
typeing::Memory_natural Wamp< A_type >::get_quantity() const noexcept {
	return _the_quantity;
}

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
template< class A_type >
Wamp< A_type >::~Wamp() noexcept
{}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
template< class A_type >
Wamp< A_type >::Wamp() noexcept
{}

// static
template< class A_type >
Wamp< A_type > Wamp< A_type >::create( const Memory_pointer &a_memory_pointer, typeing::Memory_natural a_quantity ) {
	JMSF_LOG_ERROR_PRELIMINARY_OUTPUT_TYPED( a_memory_pointer.is_empty(), "Wamp< A_type >::create( memory_pointer, quantity )", JMSF_TYPE_NAME( A_type ) );
	JMSF_LOG_ERROR_PRELIMINARY_OUTPUT_TYPED( a_quantity.is_nill(), "Wamp< A_type >::create( memory_pointer, quantity )", JMSF_TYPE_NAME( A_type ) );

	if ( a_memory_pointer.is_empty() ) {
		jmsf_Should_never_be_null( Wamp< A_type >() );
	} else if ( a_quantity.is_nill() ) {
		jmsf_Should_never_be_null( Wamp< A_type >() );
	}

	return Wamp< A_type >( a_memory_pointer, a_quantity );
}

template< class A_type >
Wamp< A_type >::Wamp( const Memory_pointer &a_memory_pointer, typeing::Memory_natural a_quantity ) noexcept
	:
		_the_memory_pointer( a_memory_pointer ),
		_the_quantity( a_quantity )
{}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
template< class A_type >
Wamp< A_type >::Wamp( const Wamp< A_type > &another ) noexcept
	:
		_the_memory_pointer( another._the_memory_pointer ),
		_the_quantity( another._the_quantity )
{}

template< class A_type >
const Wamp< A_type > &Wamp< A_type >::operator =( const Wamp< A_type > &another ) noexcept {
	if ( &another == this ) return *this;

	_the_memory_pointer = another._the_memory_pointer;
	_the_quantity = another._the_quantity;
	return *this;
}

// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


} // namespace memorying
} // namespace jmsf
