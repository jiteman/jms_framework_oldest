#pragma once


#include "Base_for_both_constant_and_nonconstant.hpp"

#include "Reference_counters.h"

#include "jmsf/memorying/Constructor.hin"
#include "jmsf/memorying/Destructor.hin"
#include "jmsf/memorying/Womp.hin"
#include "jmsf/memorying/Omp.hin"

#include "jmsf/typeing/Boolean.h"

#include "jmsf/validating/File_and_line.h"
#include "jmsf/validating/Exception.h"
#include "jmsf/validating/Should.h"

#include "jmsf/validating/logging_macroses.h"

//#include <stdexcept>


namespace jmsf {
namespace temping {
namespace internals {


// statics
template< class A_type >
const typeing::Shortest_natural Base_for_both_constant_and_nonconstant< A_type >::type_None = typeing::Shortest_natural::create( 128 );

template< class A_type >
const typeing::Shortest_natural Base_for_both_constant_and_nonconstant< A_type >::type_Empty = typeing::Shortest_natural::create( 64 );

template< class A_type >
const typeing::Shortest_natural Base_for_both_constant_and_nonconstant< A_type >::type_Nonlinked = typeing::Shortest_natural::create( 32 );

template< class A_type >
const typeing::Shortest_natural Base_for_both_constant_and_nonconstant< A_type >::type_Weak = typeing::Shortest_natural::create( 16 );

template< class A_type >
const typeing::Shortest_natural Base_for_both_constant_and_nonconstant< A_type >::type_Unique = typeing::Shortest_natural::create( 8 );

template< class A_type >
const typeing::Shortest_natural Base_for_both_constant_and_nonconstant< A_type >::type_Shared = typeing::Shortest_natural::create( 4 );
//~statics

// SenSEI: todonext - extract method, remove duplication
template< class A_type >
typeing::Boolean Base_for_both_constant_and_nonconstant< A_type >::is_empty() const {
	validate();
	JMSF_LOG_INFORMING_OUTPUT_TYPED( "Base_for_both_constant_and_nonconstant< A_type >::is_empty()", JMSF_TYPE_NAME( A_type ) );

//	const typeing::Boolean omp_is_empty = _object_memory_pointer.is_empty();
//	const typeing::Boolean null_object_is_empty = A_type::the_deleter::get_null_object_via_deleter().is_empty();

	return
		A_type::the_deleter::get_null_object_via_deleter().is_empty() ?
			_object_memory_pointer.is_empty() :
			typeing::Boolean::create(
				_object_memory_pointer.get_memory().get_address() ==
					A_type::the_deleter::get_null_object_via_deleter().get_memory().get_address() );
}

template< class A_type >
typeing::Boolean Base_for_both_constant_and_nonconstant< A_type >::is_not_empty() const {
	return is_empty().inversion();
}

template< class A_type >
typeing::Memory_natural Base_for_both_constant_and_nonconstant< A_type >::get_connectivity() const {
	validate();

	if ( _type == type_None || _type == type_Empty || _type == type_Nonlinked ) {
		return typeing::Memory_natural_nill;
	} else if ( _type == type_Unique ) {
		return typeing::Memory_natural_one;
	} else if ( _type == type_Weak || _type == type_Shared ) {
		return _reference_counters->get_connectivity();
	}

	JMSF_LOG_ERROR_OUTPUT_TYPED( "Base_for_both_constant_and_nonconstant< A_type >::get_connectivity()", JMSF_TYPE_NAME( A_type ) );
	jmsf_Should_never_reach_here( BASE_FOR_BOTH_CONSTANT_AND_NONCONSTANT_WRONG_TYPE );
	return typeing::Memory_natural_badmax;
}

template< class A_type >
memorying::Omp< typename A_type::the_type > &Base_for_both_constant_and_nonconstant< A_type >::get() {
	validate();
	return _object_memory_pointer;
}

template< class A_type >
const memorying::Omp< typename A_type::the_type > &Base_for_both_constant_and_nonconstant< A_type >::get() const {
	validate();
	return _object_memory_pointer;
}

template< class A_type >
memorying::Omp< typename A_type::the_type > Base_for_both_constant_and_nonconstant< A_type >::release() {
	validate();
	memorying::Omp< typename A_type::the_type > pointerToObject;

	if ( _type == type_None ) {
	} else if ( _type == type_Empty ) {
		pointerToObject = _object_memory_pointer; // NullObject

		_object_memory_pointer =
			A_type::the_deleter::get_null_object_via_deleter().is_empty() ?
				memorying::Omp< typename A_type::the_type >() :
				memorying::Omp< typename A_type::the_type >::create_from_weak( A_type::the_deleter::get_null_object_via_deleter() );
	} else if ( _type == type_Nonlinked ) {
		pointerToObject = _object_memory_pointer;

		_object_memory_pointer =
			A_type::the_deleter::get_null_object_via_deleter().is_empty() ?
				memorying::Omp< typename A_type::the_type >() :
				memorying::Omp< typename A_type::the_type >::create_from_weak( A_type::the_deleter::get_null_object_via_deleter() );

		_type = type_Empty;
	} else if ( _type == type_Unique ) {
		pointerToObject = _object_memory_pointer;

		_object_memory_pointer =
			A_type::the_deleter::get_null_object_via_deleter().is_empty() ?
				memorying::Omp< typename A_type::the_type >() :
				memorying::Omp< typename A_type::the_type >::create_from_weak( A_type::the_deleter::get_null_object_via_deleter() );

		_type = type_Empty;
	} else if ( _type == type_Weak ) {
		_reference_counters->decrease_weak();

		if ( _reference_counters->is_strong_nill() ) {
			if ( _reference_counters->is_weak_nill() ) {
				memorying::Destructor< Reference_counters >::destruct( _reference_counters );
			}
		}

		_object_memory_pointer =
			A_type::the_deleter::get_null_object_via_deleter().is_empty() ?
				memorying::Omp< typename A_type::the_type >() :
				memorying::Omp< typename A_type::the_type >::create_from_weak( A_type::the_deleter::get_null_object_via_deleter() );

		_reference_counters = memorying::Omp< Reference_counters >();
		_type = type_Empty;
	} else if ( _type == type_Shared ) {
		_reference_counters->decrease_strong();

		if ( _reference_counters->is_strong_nill() ) {
			if ( _reference_counters->is_weak_nill() ) {
				memorying::Destructor< Reference_counters >::destruct( _reference_counters );
			}

			pointerToObject = _object_memory_pointer;
		}

		_object_memory_pointer = memorying::Omp< typename A_type::the_type >::create_from_weak( A_type::the_deleter::get_null_object_via_deleter() );
		_reference_counters = memorying::Omp< Reference_counters >();
		_type = type_Empty;
	} else {
		jmsf_Should_never_reach_here( BASE_FOR_BOTH_CONSTANT_AND_NONCONSTANT_WRONG_TYPE );
	}

	validate();
	return pointerToObject;
}

template< class A_type >
const memorying::Omp< typename A_type::the_type > Base_for_both_constant_and_nonconstant< A_type >::release() const {
	return const_cast< Base_for_both_constant_and_nonconstant< A_type > * >( this )->release();
}

template< class A_type >
void Base_for_both_constant_and_nonconstant< A_type >::empty() {
	const typeing::Shortest_natural previousType = _type;
	const memorying::Omp< typename A_type::the_type > pointer_to_object = release();

	if ( previousType == type_None || previousType == type_Empty || previousType == type_Nonlinked || previousType == type_Weak ) return;

	if ( previousType == type_Unique || previousType == type_Shared ) {
		// typename A_type::the_deleter::delete_object( pointer_to_object );
		A_type::the_deleter::delete_object( pointer_to_object );
	} else {
		JMSF_LOG_ERROR_OUTPUT_TYPED( "Base_for_both_constant_and_nonconstant< A_type >::empty()", JMSF_TYPE_NAME( A_type ) );
		jmsf_Should_never_reach_here( BASE_FOR_BOTH_CONSTANT_AND_NONCONSTANT_WRONG_TYPE );
	}
}

template< class A_type >
void Base_for_both_constant_and_nonconstant< A_type >::empty() const {
	const_cast< Base_for_both_constant_and_nonconstant< A_type > * >( this )->empty();
}

template< class A_type >
void Base_for_both_constant_and_nonconstant< A_type >::set_from( const Base_for_both_constant_and_nonconstant< A_type > &other ) {
	validate();
	other.validate();

	const typeing::Shortest_natural previousType = _type;
	_type = other._type;

	if ( other._type == type_None ) {
		if ( previousType == type_Empty || previousType == type_Weak || previousType == type_Unique || previousType == type_Shared ) {
			JMSF_LOG_ERROR_OUTPUT_TYPED( "Base_for_both_constant_and_nonconstant< A_type >::set_from( another )", JMSF_TYPE_NAME( A_type ) );
			jmsf_Should_never_reach_here( BASE_FOR_BOTH_CONSTANT_AND_NONCONSTANT_INITIALIZATION_ORDER_IS_VIOLATED );
		}

		_object_memory_pointer = memorying::Omp< typename A_type::the_type >();
		_reference_counters = memorying::Omp< Reference_counters >();
	} else if ( other._type == type_Empty ) {

		_object_memory_pointer =
			A_type::the_deleter::get_null_object_via_deleter().is_empty() ?
				memorying::Omp< typename A_type::the_type >() :
				memorying::Omp< typename A_type::the_type >::create_from_weak( A_type::the_deleter::get_null_object_via_deleter() );

		_reference_counters = memorying::Omp< Reference_counters >();
	} else if ( other._type == type_Nonlinked ) {
		_object_memory_pointer = other._object_memory_pointer;
		_reference_counters = memorying::Omp< Reference_counters >();
	} else if ( other._type == type_Unique ) {
		_object_memory_pointer = other._object_memory_pointer;

		const_cast< Base_for_both_constant_and_nonconstant< A_type > & >( other )._object_memory_pointer =
			A_type::the_deleter::get_null_object_via_deleter().is_empty() ?
				memorying::Omp< typename A_type::the_type >() :
				memorying::Omp< typename A_type::the_type >::create_from_weak( A_type::the_deleter::get_null_object_via_deleter() );

		const_cast< Base_for_both_constant_and_nonconstant< A_type > & >( other )._type = type_Empty;
		_reference_counters = memorying::Omp< Reference_counters >();
	} else if ( other._type == type_Weak ) {
		if ( other._reference_counters.is_not_empty() ) {
			if ( other._reference_counters->is_strong_nill() ) {
				const_cast< Base_for_both_constant_and_nonconstant< A_type > & >( other )._reference_counters->decrease_weak();

				if ( other._reference_counters->is_weak_nill() ) {
					memorying::Destructor< Reference_counters >::destruct( other._reference_counters );
					const_cast< Base_for_both_constant_and_nonconstant< A_type > & >( other )._reference_counters = memorying::Omp< Reference_counters >();

					const_cast< Base_for_both_constant_and_nonconstant< A_type > & >( other )._object_memory_pointer =
						A_type::the_deleter::get_null_object_via_deleter().is_empty() ?
							memorying::Omp< typename A_type::the_type >() :
							memorying::Omp< typename A_type::the_type >::create_from_weak( A_type::the_deleter::get_null_object_via_deleter() );

					const_cast< Base_for_both_constant_and_nonconstant< A_type > & >( other )._type = type_Empty;
				}

				_reference_counters = memorying::Omp< Reference_counters >();

				_object_memory_pointer =
					A_type::the_deleter::get_null_object_via_deleter().is_empty() ?
						memorying::Omp< typename A_type::the_type >() :
						memorying::Omp< typename A_type::the_type >::create_from_weak( A_type::the_deleter::get_null_object_via_deleter() );

				_type = type_Empty;
			} else {
				_reference_counters = other._reference_counters;
				_reference_counters->increase_weak();
				_object_memory_pointer = other._object_memory_pointer;
			}
		}
	} else if ( other._type == type_Shared ) {
		if ( other._reference_counters.is_not_empty() ) {
			_reference_counters = other._reference_counters;
			_reference_counters->increase_strong();
			_object_memory_pointer = other._object_memory_pointer;
		} else {
			jmsf_Should_never_be_null( other._reference_counters );
		}
	} else {
		jmsf_Should_never_reach_here( BASE_FOR_BOTH_CONSTANT_AND_NONCONSTANT_WRONG_TYPE );
	}

	validate();
	other.validate();
}

template< class A_type >
void Base_for_both_constant_and_nonconstant< A_type >::set_from( const Base_for_both_constant_and_nonconstant< A_type > &other ) const {
	const_cast< Base_for_both_constant_and_nonconstant< A_type > * >( this )->setFrom( other );
}

template< class A_type >
Base_for_both_constant_and_nonconstant< A_type > Base_for_both_constant_and_nonconstant< A_type >::create_shared_from_this(
	const memorying::Womp< memorying::Allocator > &reference_counters_allocator ) const
{
	validate();

	Base_for_both_constant_and_nonconstant< A_type > candidate_for_shared;

	if ( _type == type_None || _type == type_Empty || _type == type_Nonlinked ) {
	} else if ( _type == type_Weak ) {
		candidate_for_shared = *this;

		if ( !_reference_counters->is_strong_nill() ) {
			_reference_counters->decrease_weak();
			_reference_counters->increase_strong();
			candidate_for_shared._type = type_Shared;
		}
	} else if ( _type == type_Unique ) {
		{
			jmsf_Should_never_be_null( reference_counters_allocator );
			Base_for_both_constant_and_nonconstant< A_type > &nonconstant_this = const_cast< Base_for_both_constant_and_nonconstant< A_type > & >( *this );
			nonconstant_this._type = type_Shared;
			nonconstant_this._reference_counters = memorying::Constructor< Reference_counters, Reference_counters >::construct( reference_counters_allocator );
		}

		candidate_for_shared = *this;
	} else if ( _type == type_Shared ) {
		candidate_for_shared = *this;
	} else {
		jmsf_Should_never_reach_here( BASE_FOR_BOTH_CONSTANT_AND_NONCONSTANT_WRONG_TYPE );
	}

	validate();
	return candidate_for_shared;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
template< class A_type >
typeing::Boolean Base_for_both_constant_and_nonconstant< A_type >::operator ==( const Base_for_both_constant_and_nonconstant &other ) const {
	validate();
	other.validate();
	return typeing::Boolean::create( _object_memory_pointer == other._object_memory_pointer );
}

template< class A_type >
typeing::Boolean Base_for_both_constant_and_nonconstant< A_type >::operator !=( const Base_for_both_constant_and_nonconstant &other ) const {
	return operator ==( other ).inversion();
}

template< class A_type >
typename A_type::the_type &Base_for_both_constant_and_nonconstant< A_type >::operator *() {
	validate();
	jmsf_Should_never_be( _object_memory_pointer );
	return *_object_memory_pointer;
}

template< class A_type >
const typename A_type::the_type &Base_for_both_constant_and_nonconstant< A_type >::operator *() const {
	validate();
	jmsf_Should_never_be_null( _object_memory_pointer );
	return *_object_memory_pointer;
}

template< class A_type >
typename A_type::the_type *Base_for_both_constant_and_nonconstant< A_type >::operator ->() {
	validate();

//	if ( _object_memory_pointer.is_empty() ) {
//		throw ::std::logic_error( "Base_for_both_constant_and_nonconstant< A_type >::operator ->()" );
//	}

	jmsf_Should_never_be_null( _object_memory_pointer );
	return _object_memory_pointer.take();
}

template< class A_type >
const typename A_type::the_type *Base_for_both_constant_and_nonconstant< A_type >::operator ->() const {
	validate();
	jmsf_Should_never_be_null( _object_memory_pointer );
	return _object_memory_pointer.get();
}

// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
template< class A_type >
Base_for_both_constant_and_nonconstant< A_type >::~Base_for_both_constant_and_nonconstant() noexcept {
	try {
		empty();
	} catch ( const validating::Exception & ) { // catchedException
		// add an exception information message box or log error information
	}
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
template< class A_type >
Base_for_both_constant_and_nonconstant< A_type >::Base_for_both_constant_and_nonconstant() {
	_type = type_Empty;
	_object_memory_pointer = typename A_type::the_type::get_null_object();
	_reference_counters = nullptr;
	validate();
}


template< class A_type >
Base_for_both_constant_and_nonconstant< A_type >::Base_for_both_constant_and_nonconstant( const typeing::Shortest_natural type, const memorying::Omp< typename A_type::the_type > &pointerToObject )
	:
		_object_memory_pointer( pointerToObject )
{
	jmsf_Should_never_be( _type == type_Shared );
	_type = type;
	_reference_counters = memorying::Omp< Reference_counters >();

	if ( _type == type_None || _type == type_Empty || _type == type_Weak || _type == type_Nonlinked || _type == type_Unique ) {
		validate();
	} else {
		jmsf_Should_never_reach_here( BASE_FOR_BOTH_CONSTANT_AND_NONCONSTANT_WRONG_TYPE );
	}
}

template< class A_type >
Base_for_both_constant_and_nonconstant< A_type >::Base_for_both_constant_and_nonconstant(
	const memorying::Womp< memorying::Allocator > &reference_counters_allocator,
	const memorying::Omp< typename A_type::the_type > &pointerToObject )
	:
		_object_memory_pointer( pointerToObject )
{
	_type = type_Shared;
	_reference_counters = memorying::Constructor< Reference_counters, Reference_counters >::construct( reference_counters_allocator );
	_reference_counters->increase_strong();
	validate();
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
template< class A_type >
Base_for_both_constant_and_nonconstant< A_type >::Base_for_both_constant_and_nonconstant( const Base_for_both_constant_and_nonconstant< A_type > &other ) {
	_type = type_None;
	_object_memory_pointer = memorying::Omp< typename A_type::the_type >();
	_reference_counters = memorying::Omp< Reference_counters >();
	set_from( other );
}

template< class A_type >
const Base_for_both_constant_and_nonconstant< A_type > &Base_for_both_constant_and_nonconstant< A_type >::operator =( const Base_for_both_constant_and_nonconstant< A_type > &another ) {
	JMSF_LOG_INFORMING_OUTPUT_TYPED( "Base_for_both_constant_and_nonconstant< A_type >::operator =( another )", JMSF_TYPE_NAME( A_type ) );

	if ( this == &another ) return *this; // same

	if ( _object_memory_pointer.is_empty() && another._object_memory_pointer.is_empty() ) return *this; // both empty

	if ( _object_memory_pointer.is_not_empty() && another._object_memory_pointer.is_not_empty() ) {
		if ( _object_memory_pointer.get_memory().get_address() == another._object_memory_pointer.get_memory().get_address() ) {
			// same object
			return *this;
		}
	}

	empty();
	set_from( another );
	return *this;
}

// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
template< class A_type >
void Base_for_both_constant_and_nonconstant< A_type >::validate() const {
	JMSF_LOG_INFORMING_PARANOIDAL_OUTPUT_TYPED( "Base_for_both_constant_and_nonconstant< %A_type% >::validate()", JMSF_TYPE_NAME( A_type ) );

	if ( _type == type_None ) {
		jmsf_Should_always_be_null( _reference_counters );
		jmsf_Should_always_be_null( _object_memory_pointer );
	} else if ( _type == type_Empty ) {
		jmsf_Should_always_be_null( _reference_counters );

		if ( A_type::the_deleter::get_null_object_via_deleter().is_empty() ) {
			// Pointer
			jmsf_Should_always_be_null( _object_memory_pointer );
		} else {
			// Proxy
			jmsf_Should_never_be_null( _object_memory_pointer );

			jmsf_Should_always_be(
				typeing::Boolean::create(
					_object_memory_pointer.get_memory().get_address() ==
						A_type::the_deleter::get_null_object_via_deleter().get_memory().get_address() ) );
		}
	} else if ( _type == type_Nonlinked ) {
		jmsf_Should_always_be_null( _reference_counters );
		jmsf_Should_never_be_null( _object_memory_pointer );

		if ( A_type::the_deleter::get_null_object_via_deleter().is_not_empty() ) {
			// Proxy
			jmsf_Should_never_be(
				typeing::Boolean::create(
					_object_memory_pointer.get_memory().get_address() ==
						A_type::the_deleter::get_null_object_via_deleter().get_memory().get_address() ) );
		}

		JMSF_LOG_INFORMING_PARANOIDAL_OUTPUT_TYPED( "Base_for_both_constant_and_nonconstant< %A_type% >::validate()", JMSF_TYPE_NAME( A_type ) );
	} else if ( _type == type_Weak ) {
		if ( _reference_counters.is_not_empty() ) {
			if ( _reference_counters->is_strong_nill() ) {
				const_cast< Base_for_both_constant_and_nonconstant< A_type > * >( this )->_reference_counters->decrease_weak();

				if ( _reference_counters->is_weak_nill() ) {
					memorying::Destructor< Reference_counters >::destruct( _reference_counters );
					const_cast< Base_for_both_constant_and_nonconstant< A_type > * >( this )->_reference_counters = memorying::Omp< Reference_counters >();
					const_cast< Base_for_both_constant_and_nonconstant< A_type > * >( this )->_object_memory_pointer =
						memorying::Omp< typename A_type::the_type >::create_from_weak( A_type::the_deleter::get_null_object_via_deleter() );
					const_cast< Base_for_both_constant_and_nonconstant< A_type > * >( this )->_type = type_Empty;
				}
			}
		}
	} else if ( _type == type_Unique ) {
		jmsf_Should_always_be_null( _reference_counters );
		jmsf_Should_never_be_null( _object_memory_pointer );

		if ( A_type::the_deleter::get_null_object_via_deleter().is_not_empty() ) {
			// Proxy
			jmsf_Should_never_be(
				typeing::Boolean::create(
					_object_memory_pointer.get_memory().get_address() ==
						A_type::the_deleter::get_null_object_via_deleter().get_memory().get_address() ) );
		}
	} else if ( _type == type_Shared ) {
		jmsf_Should_never_be_null( _reference_counters );
		jmsf_Should_never_be_null( _object_memory_pointer );

		if ( A_type::the_deleter::get_null_object_via_deleter().is_not_empty() ) {
			// Proxy
			jmsf_Should_never_be(
				typeing::Boolean::create(
					_object_memory_pointer.get_memory().get_address() ==
						A_type::the_deleter::get_null_object_via_deleter().get_memory().get_address() ) );
		}
	} else {
		jmsf_Should_never_reach_here( BASE_FOR_BOTH_CONSTANT_AND_NONCONSTANT_WRONG_TYPE );
	}
}

// static
// template< class A_type >
// Automatic< osie::Mutex > &Base_for_both_constant_and_nonconstant< A_type >::takeStaticMutex() noexcept {
// 	if ( static_baseForBothConstantAndNonconstant_Mutex.get() == nullptr ) {
// 		osie::static_factory_OperatingSystemSpecial::takeOperatingSystemMutex()->lock();
//
// 		if ( static_baseForBothConstantAndNonconstant_Mutex.get() == nullptr ) {
// 			static_baseForBothConstantAndNonconstant_Mutex = osie::static_factory_OperatingSystemSpecial::createAutomaticMutex();
// 		}
//
// 		osie::static_factory_OperatingSystemSpecial::takeOperatingSystemMutex()->unlock();
// 	}
//
// 	return static_baseForBothConstantAndNonconstant_Mutex;
// }

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// static
// template< class A_type >
// Automatic< osie::Mutex > Base_for_both_constant_and_nonconstant< A_type >::static_baseForBothConstantAndNonconstant_Mutex;

// static
template< class A_type >
const typeing::internals::platform_character *const Base_for_both_constant_and_nonconstant< A_type >::BASE_FOR_BOTH_CONSTANT_AND_NONCONSTANT_WRONG_TYPE =
	"Base_for_both_constant_and_nonconstant< A_type > - Wrong type detected";

// static
template< class A_type >
const typeing::internals::platform_character *const Base_for_both_constant_and_nonconstant< A_type >::BASE_FOR_BOTH_CONSTANT_AND_NONCONSTANT_INITIALIZATION_ORDER_IS_VIOLATED =
	"Base_for_both_constant_and_nonconstant< A_type > - Initialization order is violated";


} // namespace internals
} // namespace temping
} // namespace jmsf
